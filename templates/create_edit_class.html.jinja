{% extends "base.html.jinja" %}
{% block title %}{{ 'Редактировать класс' if mode == 'edit' else 'Создать класс' }}{% endblock %}
{% block content %}
<h1>{{ 'Редактировать класс' if mode == 'edit' else 'Создать класс' }}</h1>
<form method="post" id="classForm">
    {{ form.hidden_tag() }}
    <p>
        {{ form.name.label }}<br>
        {{ form.name(size=40) }}
    </p>
    <p>
        {{ form.description.label }}<br>
        {{ form.description(rows=3, cols=40) }}
    </p>
    <p>
        {{ form.hit_dice.label }}<br>
        {{ form.hit_dice(size=40) }}
    </p>
    <p>
        {{ form.hit_points_first.label }}<br>
        {{ form.hit_points_first(size=40) }}
    </p>
    <p>
        {{ form.hit_points_next.label }}<br>
        {{ form.hit_points_next(size=40) }}
    </p>
    <p>
        {{ form.armor_proficiencies.label }}<br>
        {{ form.armor_proficiencies(size=40) }}
    </p>
    <p>
        {{ form.weapon_proficiencies.label }}<br>
        {{ form.weapon_proficiencies(size=40) }}
    </p>
    <p>
        {{ form.tool_proficiencies.label }}<br>
        {{ form.tool_proficiencies(size=40) }}
    </p>
    <p>
        {{ form.saving_throws.label }}<br>
        {{ form.saving_throws(size=40) }}
    </p>
    <p>
        {{ form.skills.label }}<br>
        {{ form.skills(size=40) }}
    </p>
    {% if mode == 'edit' %}
    <h2>Таблица развития класса</h2>
    <div class="table-controls" style="display: flex; align-items: center;">
        <span style="margin-left:auto;">
            <button type="button" id="addColumnBtn" style="background:none;border:none;font-size:2em;cursor:pointer;" title="Добавить колонку">+</button>
        </span>
    </div>
    
    <table id="classTable">
        <thead>
            <tr>
                <th>Уровень</th>
                <th>Бонус мастерства</th>
                {% for col in custom_columns %}
                    <th>
                        <span>{{ col }}</span>
                        <span class="remove-col" data-col="{{ col }}" style="color:red;cursor:pointer;font-weight:bold;margin-left:5px;">&#10006;</span>
                    </th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in class_table %}
            <tr data-level="{{ row.level }}">
                <td>{{ row.level }}</td>
                <td>
                    <input type="number" 
                           name="proficiency_{{ row.level }}" 
                           value="{{ row.proficiency_bonus }}"
                           min="2" max="6">
                </td>
                {% for col in custom_columns %}
                    <td>
                        <input type="text" 
                               name="custom_{{ col }}_{{ row.level }}"
                               value="{{ row.custom.get(col, '') }}">
                    </td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <input type="hidden" name="custom_columns" id="customColumnsData">
    <input type="hidden" name="table_data" id="tableData">
    {% endif %}

    <h3>Способности</h3>
    <div id="abilities-container"></div>
    <button type="button" id="add-ability-btn" class="button">+ Добавить способность</button>
    {{ form.abilities_json_field(id="abilities_json_field") }}
    <br><br>
    <input type="submit" value="Сохранить" class="button">
</form>

<!-- Модалка для ввода названия новой колонки -->
<div id="columnModal" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.3);align-items:center;justify-content:center;">
    <div style="background:#fff;padding:20px;border-radius:8px;min-width:300px;box-shadow:0 2px 8px #0002;">
        <label for="modalColumnName">Название новой колонки:</label>
        <input type="text" id="modalColumnName" style="width:100%;margin-bottom:10px;">
        <button type="button" id="modalAddBtn" class="button">Добавить</button>
        <button type="button" id="modalCancelBtn" class="button" style="background:#eee;color:#333;">Отмена</button>
    </div>
</div>

<script>
    // filepath: templates/create_edit_class.html.jinja
    // abilities = window.existingAbilities из Jinja
    let abilities = {{ existing_abilities_json|safe }};
    function renderAbilities() {
        const container = document.getElementById('abilities-container');
        container.innerHTML = '';
        abilities.forEach((ab, idx) => {
            const div = document.createElement('div');
            div.className = 'ability-item';
            div.innerHTML = `
                <label>Название: <input type="text" value="${ab.name || ''}" data-idx="${idx}" data-field="name"></label>
                <label>Описание: <input type="text" value="${ab.description || ''}" data-idx="${idx}" data-field="description"></label>
                <label>Уровень: <input type="number" value="${ab.level || 1}" data-idx="${idx}" data-field="level"></label>
                <label>Тип: <input type="text" value="${ab.type || ''}" data-idx="${idx}" data-field="type"></label>
                <button type="button" class="remove-ability-btn" data-idx="${idx}">Удалить</button>
            `;
            container.appendChild(div);
        });
        // События для удаления
        document.querySelectorAll('.remove-ability-btn').forEach(btn => {
            btn.onclick = function() {
                const idx = +btn.getAttribute('data-idx');
                abilities.splice(idx, 1);
                renderAbilities();
                updateAbilitiesField();
            }
        });
        // События для изменения
        container.querySelectorAll('input').forEach(inp => {
            inp.oninput = function() {
                const idx = +inp.getAttribute('data-idx');
                const field = inp.getAttribute('data-field');
                abilities[idx][field] = inp.value;
                updateAbilitiesField();
            }
        });
        updateAbilitiesField();
    }
    function updateAbilitiesField() {
        document.getElementById('abilities_json_field').value = JSON.stringify(abilities);
    }
    document.getElementById('add-ability-btn').onclick = function() {
        abilities.push({name: '', description: '', level: 1, type: ''});
        renderAbilities();
    };
    // Инициализация
    renderAbilities();

    function getCustomColumns() {
        const headers = Array.from(document.querySelectorAll('#classTable th')).slice(2);
        return headers.map(th => th.querySelector('span').textContent.trim());
    }

    function updateHiddenFields() {
        const customColumns = getCustomColumns();
        document.getElementById('customColumnsData').value = JSON.stringify(customColumns);
        const rows = document.querySelectorAll('#classTable tbody tr');
        const tableData = Array.from(rows).map(row => {
            const level = parseInt(row.dataset.level);
            const profBonus = parseInt(row.querySelector(`input[name="proficiency_${level}"]`).value);
            const custom = {};
            customColumns.forEach(col => {
                const input = row.querySelector(`input[name="custom_${col}_${level}"]`);
                if (input) {
                    custom[col] = input.value;
                }
            });
            return { level, proficiency_bonus: profBonus, custom };
        });
        document.getElementById('tableData').value = JSON.stringify(tableData);
    }

    document.getElementById('classForm').onsubmit = function() {
        updateHiddenFields();
        return true;
    };

    document.addEventListener('DOMContentLoaded', function() {
        const table = document.getElementById('classTable');
        if (table) {
            table.addEventListener('change', function(e) {
                if (e.target.tagName === 'INPUT') {
                    updateHiddenFields();
                }
            });
        }
        // Модалка для добавления колонки
        const addBtn = document.getElementById('addColumnBtn');
        const modal = document.getElementById('columnModal');
        const modalInput = document.getElementById('modalColumnName');
        const modalAddBtn = document.getElementById('modalAddBtn');
        const modalCancelBtn = document.getElementById('modalCancelBtn');
        addBtn.onclick = function() {
            modal.style.display = 'flex';
            modalInput.value = '';
            modalInput.focus();
        };
        modalCancelBtn.onclick = function() {
            modal.style.display = 'none';
        };
        modalAddBtn.onclick = addColumnFromModal;
        modalInput.onkeydown = function(e) {
            if (e.key === 'Enter') addColumnFromModal();
        };
        function addColumnFromModal() {
            const name = modalInput.value.trim();
            if (!name) return;
            // Проверка на дубликаты
            if (getCustomColumns().includes(name)) {
                alert('Колонка с таким именем уже существует');
                return;
            }
            // Добавляем колонку в таблицу
            const headers = document.querySelector('#classTable thead tr');
            headers.insertAdjacentHTML('beforeend', `<th><span>${name}</span><span class="remove-col" data-col="${name}" style="color:red;cursor:pointer;font-weight:bold;margin-left:5px;">&#10006;</span></th>`);
            const rows = document.querySelectorAll('#classTable tbody tr');
            rows.forEach(row => {
                const level = row.dataset.level;
                row.insertAdjacentHTML('beforeend', `
                    <td>
                        <input type="text" name="custom_${name}_${level}" value="">
                    </td>
                `);
            });
            modal.style.display = 'none';
            updateHiddenFields();
        }
        // Удаление колонки на клиенте
        document.getElementById('classTable').addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-col')) {
                const colName = e.target.dataset.col;
                // Удаляем th
                e.target.closest('th').remove();
                // Удаляем td для этой колонки во всех строках
                const rows = document.querySelectorAll('#classTable tbody tr');
                rows.forEach(row => {
                    const inputs = row.querySelectorAll(`input[name^="custom_${colName}_"]`);
                    inputs.forEach(input => input.closest('td').remove());
                });
                updateHiddenFields();
            }
        });
    });
</script>
{% endblock %}