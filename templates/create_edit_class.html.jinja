{% extends "base.html.jinja" %}
{% block title %}{{ 'Редактировать класс' if mode == 'edit' else 'Создать класс' }}{% endblock %}
{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/create-edit.css') }}">
{% endblock %}
{% block content %}
<div class="crea        addColumnBtn.onclick = function() {
            modal.classList.add('show');
            modalInput.value = '';
            modalInput.focus();
        };
        modalCancelBtn.onclick = function() {
            modal.classList.remove('show');
        };
        
        // Закрытие модального окна при клике на фон
        modal.onclick = function(e) {
            if (e.target === modal) {
                modal.classList.remove('show');
            }
        };
        
        // Закрытие модального окна по ESC
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && modal.classList.contains('show')) {
                modal.classList.remove('show');
            }
        });container">
    <h1 class="page-title">{{ 'Редактировать класс' if mode == 'edit' else 'Создать класс' }}</h1>
    <form method="post" id="classForm">
        {{ form.hidden_tag() }}
        
        <div class="form-section">
            <h3>Основная информация</h3>
            
            <div class="form-group">
                {{ form.name.label(class="form-label") }}
                {{ form.name(class="form-input", size=40) }}
                {% for error in form.name.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.description.label(class="form-label") }}
                {{ form.description(class="form-textarea", rows=4, cols=40) }}
                {% for error in form.description.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
        </div>

        <div class="form-section">
            <h3>Характеристики класса</h3>
            
            <div class="form-group">
                {{ form.hit_dice.label(class="form-label") }}
                {{ form.hit_dice(class="form-input", size=40) }}
                {% for error in form.hit_dice.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.hit_points_first.label(class="form-label") }}
                {{ form.hit_points_first(class="form-input", size=40) }}
                {% for error in form.hit_points_first.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.hit_points_next.label(class="form-label") }}
                {{ form.hit_points_next(class="form-input", size=40) }}
                {% for error in form.hit_points_next.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
        </div>

        <div class="form-section">
            <h3>Владения</h3>
            
            <div class="form-group">
                {{ form.armor_proficiencies.label(class="form-label") }}
                {{ form.armor_proficiencies(class="form-textarea", rows=3, cols=40) }}
                {% for error in form.armor_proficiencies.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.weapon_proficiencies.label(class="form-label") }}
                {{ form.weapon_proficiencies(class="form-textarea", rows=3, cols=40) }}
                {% for error in form.weapon_proficiencies.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.tool_proficiencies.label(class="form-label") }}
                {{ form.tool_proficiencies(class="form-textarea", rows=3, cols=40) }}
                {% for error in form.tool_proficiencies.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.saving_throws.label(class="form-label") }}
                {{ form.saving_throws(class="form-input", size=40) }}
                {% for error in form.saving_throws.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
            
            <div class="form-group">
                {{ form.skills.label(class="form-label") }}
                {{ form.skills(class="form-textarea", rows=3, cols=40) }}
                {% for error in form.skills.errors %}
                    <span class="form-error">{{ error }}</span>
                {% endfor %}
            </div>
        </div>
        
        {% if mode == 'edit' %}
        <div class="table-section">
            <h3>Таблица развития класса</h3>
            <div class="table-controls" style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center; margin-bottom: 15px; gap: 10px;">
                <button type="button" id="addColumnBtn" class="add-column-btn" title="Добавить колонку">✨ Добавить колонку</button>
            </div>
            
            <div class="table-wrapper">
                <table id="classTable" class="custom-table">
                    <thead>
                        <tr>
                            <th>Уровень</th>
                            <th>Бонус мастерства</th>
                            {% for col in custom_columns %}
                                <th>
                                    <span>{{ col }}</span>
                                    <span class="remove-col" data-col="{{ col }}" style="color:#cd4054;cursor:pointer;font-weight:bold;margin-left:5px;" title="Удалить колонку">✖</span>
                                </th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in class_table %}
                        <tr data-level="{{ row.level }}">
                            <td>{{ row.level }}</td>
                        <td>
                            <input type="number" 
                                   name="proficiency_{{ row.level }}" 
                                   value="{{ row.proficiency_bonus }}"
                                   min="2" max="6">
                        </td>
                        {% for col in custom_columns %}
                            <td>
                                <input type="text" 
                                       name="custom_{{ col }}_{{ row.level }}"
                                       value="{{ row.custom.get(col, '') }}">
                            </td>
                        {% endfor %}
                    </tr>
                    {% endfor %}
                </tbody>
                </table>
            </div>
            <input type="hidden" name="custom_columns" id="customColumnsData">
            <input type="hidden" name="table_data" id="tableData">
        </div>
        {% endif %}

        <div class="abilities-section">
            <h3>Способности класса</h3>
            <div id="abilities-container"></div>
            <button type="button" id="add-ability-btn" class="add-ability-btn">✨ Добавить способность</button>
            {{ form.abilities_json_field(id="abilities_json_field") }}
        </div>
        
        <div class="form-actions">
            <input type="submit" value="Сохранить" class="form-submit">
            <a href="{{ url_for('classes.list_classes') }}" class="cancel-btn">Отмена</a>
        </div>
    </form>
</div>

<!-- Модалка для ввода названия новой колонки -->
<div id="columnModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Добавить новую колонку</h3>
        </div>
        <div class="modal-body">
            <label for="modalColumnName">Название новой колонки:</label>
            <input type="text" id="modalColumnName" placeholder="Введите название колонки...">
        </div>
        <div class="modal-footer">
            <button type="button" id="modalAddBtn" class="modal-btn modal-btn-primary">Добавить</button>
            <button type="button" id="modalCancelBtn" class="modal-btn modal-btn-secondary">Отмена</button>
        </div>
    </div>
</div>

<script>
    // filepath: templates/create_edit_class.html.jinja
    // abilities = window.existingAbilities из Jinja
    let abilities = {{ existing_abilities_json|safe }};
    function renderAbilities() {
        const container = document.getElementById('abilities-container');
        container.innerHTML = '';
        
        if (abilities.length === 0) {
            container.innerHTML = '<p style="color: #cd853f; text-align: center; font-style: italic; padding: 20px;">Пока нет способностей. Нажмите "Добавить способность" чтобы создать первую.</p>';
        } else {
            abilities.forEach((ab, idx) => {
                const div = document.createElement('div');
                div.className = 'ability-item';
                div.innerHTML = `
                    <h4>Способность ${idx + 1}</h4>
                    <div class="ability-controls">
                        <div class="form-group">
                            <label class="form-label">Название:</label>
                            <input type="text" value="${ab.name || ''}" data-idx="${idx}" data-field="name" placeholder="Введите название способности" class="form-input">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Уровень:</label>
                            <input type="number" value="${ab.level || 1}" data-idx="${idx}" data-field="level" min="1" max="20" class="form-input">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Тип:</label>
                            <input type="text" value="${ab.type || ''}" data-idx="${idx}" data-field="type" placeholder="Например: Активная, Пассивная" class="form-input">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Описание:</label>
                        <textarea rows="3" data-idx="${idx}" data-field="description" placeholder="Введите описание способности" class="form-textarea">${ab.description || ''}</textarea>
                    </div>
                    <button type="button" class="remove-btn" data-idx="${idx}">🗑️ Удалить способность</button>
                `;
                container.appendChild(div);
            });
        }
        
        // События для удаления
        document.querySelectorAll('.remove-btn').forEach(btn => {
            btn.onclick = function() {
                const idx = +btn.getAttribute('data-idx');
                abilities.splice(idx, 1);
                renderAbilities();
                updateAbilitiesField();
            }
        });
        // События для изменения
        container.querySelectorAll('input, textarea').forEach(inp => {
            inp.oninput = function() {
                const idx = +inp.getAttribute('data-idx');
                const field = inp.getAttribute('data-field');
                abilities[idx][field] = inp.value;
                updateAbilitiesField();
            }
        });
        updateAbilitiesField();
    }
    function updateAbilitiesField() {
        document.getElementById('abilities_json_field').value = JSON.stringify(abilities);
    }
    document.getElementById('add-ability-btn').onclick = function() {
        abilities.push({name: '', description: '', level: 1, type: ''});
        renderAbilities();
    };
    // Инициализация
    renderAbilities();

    function getCustomColumns() {
        const headers = Array.from(document.querySelectorAll('#classTable th')).slice(2);
        return headers.map(th => th.querySelector('span').textContent.trim());
    }

    function updateHiddenFields() {
        const customColumns = getCustomColumns();
        document.getElementById('customColumnsData').value = JSON.stringify(customColumns);
        const rows = document.querySelectorAll('#classTable tbody tr');
        const tableData = Array.from(rows).map(row => {
            const level = parseInt(row.dataset.level);
            const profBonus = parseInt(row.querySelector(`input[name="proficiency_${level}"]`).value);
            const custom = {};
            customColumns.forEach(col => {
                const input = row.querySelector(`input[name="custom_${col}_${level}"]`);
                if (input) {
                    custom[col] = input.value;
                }
            });
            return { level, proficiency_bonus: profBonus, custom };
        });
        document.getElementById('tableData').value = JSON.stringify(tableData);
    }

    document.getElementById('classForm').onsubmit = function() {
        updateHiddenFields();
        return true;
    };

    document.addEventListener('DOMContentLoaded', function() {
        const table = document.getElementById('classTable');
        if (table) {
            table.addEventListener('change', function(e) {
                if (e.target.tagName === 'INPUT') {
                    updateHiddenFields();
                }
            });
        }
        // Модалка для добавления колонки
        const addBtn = document.getElementById('addColumnBtn');
        const modal = document.getElementById('columnModal');
        const modalInput = document.getElementById('modalColumnName');
        const modalAddBtn = document.getElementById('modalAddBtn');
        const modalCancelBtn = document.getElementById('modalCancelBtn');
        addBtn.onclick = function() {
            modal.style.display = 'flex';
            modalInput.value = '';
            modalInput.focus();
        };
        modalCancelBtn.onclick = function() {
            modal.style.display = 'none';
        };
        modalAddBtn.onclick = addColumnFromModal;
        modalInput.onkeydown = function(e) {
            if (e.key === 'Enter') addColumnFromModal();
        };
        function addColumnFromModal() {
            const name = modalInput.value.trim();
            if (!name) return;
            // Проверка на дубликаты
            if (getCustomColumns().includes(name)) {
                alert('Колонка с таким именем уже существует');
                return;
            }
            // Добавляем колонку в таблицу
            const headers = document.querySelector('#classTable thead tr');
            headers.insertAdjacentHTML('beforeend', `<th><span>${name}</span><span class="remove-col" data-col="${name}" style="color:red;cursor:pointer;font-weight:bold;margin-left:5px;">&#10006;</span></th>`);
            const rows = document.querySelectorAll('#classTable tbody tr');
            rows.forEach(row => {
                const level = row.dataset.level;
                row.insertAdjacentHTML('beforeend', `
                    <td>
                        <input type="text" name="custom_${name}_${level}" value="">
                    </td>
                `);
            });
            modal.classList.remove('show');
            updateHiddenFields();
        }
        // Удаление колонки на клиенте
        document.getElementById('classTable').addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-col')) {
                const colName = e.target.dataset.col;
                // Удаляем th
                e.target.closest('th').remove();
                // Удаляем td для этой колонки во всех строках
                const rows = document.querySelectorAll('#classTable tbody tr');
                rows.forEach(row => {
                    const inputs = row.querySelectorAll(`input[name^="custom_${colName}_"]`);
                    inputs.forEach(input => input.closest('td').remove());
                });
                updateHiddenFields();
            }
        });
    });
</script>
{% endblock %}